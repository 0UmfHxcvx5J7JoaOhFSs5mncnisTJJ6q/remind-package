{
    "collab_server" : "",
    "contents" : "#' buildLibrary\n#' \n#' Builds R libraries. Includes checks for consistency.\n#' \n#' This function is designed to help building R libraries. It performs the\n#' following steps: \\itemize{ \\item Version: Determination\n#' of a new version number (Can also be defined by the user). \\item Date:\n#' Determination of a the date of the build (Can also be defined by the user).\n#' \\item R check: Check whether the library is consistent and can be built.\n#' \\item Package building Builds the .zip and .tar.gz packages under windows.\n#' Under linux, only the .tar.gz package is built. } The commit has to be performed by the user still.\n#' \n#' @param lib Path to the package\n#' @param version Version number of the new library build. If NULL (default),\n#' new version number is determined automatically.\n#' @param date Date of the new library build. IF NULL (default) the date of\n#' today is taken. Format: yyyy-mm-dd\n#' @param cran If cran-like test is needed\n#' @param update_type 1 if the update is a major revision, 2 (default) for minor, 3 for patch, 4 only for packages in development stage\n#' @author Anastasis Giannousakis, Jan-Philipp Dietrich, Markus Bonsch\n#' @seealso \\code{\\link{codeExtract}},\\code{\\link{readDeclarations}}\n#' @export\n#' @examples\n#' \n#' \n#' \\dontrun{buildLibrary(\"magpie\")}\n#' \\dontrun{buildLibrary(\"magpie\",version=\"0.2045\",date=\"2012-10-09\")}\n#' \nbuildLibrary<-function(lib=\".\",version=NULL,date=NULL,cran=TRUE, update_type=NULL){\n  OS<-Sys.info()[\"sysname\"]\n  thisdir<-getwd()\n  if(lib!=\".\") setwd(lib)\n  on.exit(setwd(thisdir))\n  ####################################################################\n  #Remove the auxiliary Rcheck folders\n  ###################################################################\n  rcheckfolders <- grep(\".Rcheck$\",base::list.dirs(full.names = FALSE,recursive = FALSE),value=TRUE)\n  unlink(rcheckfolders,recursive=TRUE)\n  \n  ####################################################################\n  #Check if roxygen is used and run roxygenize if required\n  ################################################################### \n  descfile<-readLines(\"DESCRIPTION\")\n  if(any(grepl(\"RoxygenNote\",descfile))) {\n    devtools::document(pkg=\".\",roclets=c('rd', 'collate', 'namespace', 'vignette'))\n    roxygen <- TRUE\n  } else {\n    roxygen <- FALSE\n  }\n  \n  ##########################################################\n  #Check for version numbers\n  ##########################################################\n  #Version number in the man file\n  cat(\"Update version\\n\")\n  \n  #Version number in the description file\n  descfile<-readLines(\"DESCRIPTION\")\n  descfile_version<-sub(\"[^(0-9)]*$\",\"\",sub(\"Version:[^(0-9)]*\",\"\",grep(\"Version\",descfile,value=T),perl=T),perl=T)\n  \n  if(is.null(version)){\n    version<-descfile_version\n      \n      autoversion <- function(old_version, upt, defLengths=3) {\n        old_version <- numeric_version(old_version)\n        for(i in 1:upt) if(is.na(old_version[1,i])) old_version[1,i] <- 0\n        if(old_version[1,upt] == 0 & upt==4) old_version[1,upt] <- 9000\n        old_version[1,upt] <- as.numeric(old_version[1,i]) + 1\n        if(defLengths>upt) {\n          for(i in (upt+1):defLengths) {\n            old_version[1,i] <- 0\n          }\n        }\n        old_version <- old_version[1,1:max(upt,defLengths)]\n        return(old_version)\n      }\n      get_line <- function(){\n        # gets characters (line) from the terminal or from a connection\n        # and returns it\n        if(interactive()){\n          s <- readline()\n        } else {\n          con <- file(\"stdin\")\n          s <- readLines(con, 1, warn=FALSE)\n          on.exit(close(con))\n        }\n        return(s);\n      }\n      \n      choose_module <- function(Rfolder,title=\"Please choose an update type\") {\n        update_type <- c(\"major revision (for major rewrite of the whole package)\", \n                         \"minor revision (for new features or improvements)\", \n                         \"patch (for bugfixes and corrections)\", \n                         \"only for packages in development stage\",\n                         \"no version increment (only to use if version is already incremented!)\")\n        cat(\"\\n\\n\",title,\":\\n\\n\")\n        cat(paste(c(1:(length(update_type)-1),0), update_type, sep=\": \" ),sep=\"\\n\")\n        cat(\"\\nNumber: \")\n        identifier <- get_line()\n        identifier <- as.numeric(strsplit(identifier,\",\")[[1]])\n        if (any(!(identifier %in% (1:length(update_type)-1)))) stop(\"This choice (\",identifier,\") is not possible. Please type in a number between 0 and \",length(update_type)-1)\n        return(identifier)\n      }\n      if (is.null(update_type)) update_type <- choose_module(\".\")\n      if(update_type!=0) version<-autoversion(version,update_type)\n    \n  }\n  \n  #Change the version in descfile\n  descfile[grep(\"Version\",descfile)]<-sub(descfile_version,version,descfile[grep(\"Version\",descfile)])\n  \n  ############################################################\n  #Check for the date\n  ############################################################\n  if(any(grepl(\"Date:\",descfile))) {\n    cat(\"Update date\\n\")\n    descfile_date<-sub(\"[^(0-9)]*$\",\"\",sub(\"Date:[^(0-9)]*\",\"\",grep(\"Date:\",descfile,value=T),perl=T),perl=T)\n    if(is.null(date)) date <- Sys.Date()\n    #Change the date in descfile      \n    descfile[grep(\"Date:\",descfile)]<-sub(descfile_date,date,descfile[grep(\"Date:\",descfile)])\n  }\n  ############################################################\n  #Write the modified description files\n  ############################################################\n  writeLines(descfile,\"DESCRIPTION\")\n  \n  ############################################################\n  #check the library\n  ############################################################\n  ck <- devtools::check(\".\",cran=cran)\n  print(ck)\n  \n  if(length(ck$errors)>0) {\n    stop(\"The package check showed errors. You need to fix these errors first before submission!\")\n  }  \n  \n  if(length(ck$warnings)>0) {\n    stop(\"The package check showed warnings. You need to take care of these warnings first before submission!\")\n  }\n}\n",
    "created" : 1489758174700.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "198814812",
    "id" : "74A6E7E4",
    "lastKnownWriteTime" : 1506948367,
    "last_content_update" : 1506948367,
    "path" : "~/Documents/work/libraries/lucode/R/buildLibrary.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}